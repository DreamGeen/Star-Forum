// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

package messagePb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MessageService service

func NewMessageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MessageService service

type MessageService interface {
	ListMessageCount(ctx context.Context, in *ListMessageCountRequest, opts ...client.CallOption) (*ListMessageCountResponse, error)
	SendSystemMessage(ctx context.Context, in *SendSystemMessageRequest, opts ...client.CallOption) (*SendSystemMessageResponse, error)
	SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...client.CallOption) (*SendPrivateMessageResponse, error)
	SendRemindMessage(ctx context.Context, in *SendRemindMessageRequest, opts ...client.CallOption) (*SendRemindMessageResponse, error)
	GetChatList(ctx context.Context, in *GetChatListRequest, opts ...client.CallOption) (*GetChatListResponse, error)
	LoadMessage(ctx context.Context, in *LoadMessageRequest, opts ...client.CallOption) (*LoadMessageResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) ListMessageCount(ctx context.Context, in *ListMessageCountRequest, opts ...client.CallOption) (*ListMessageCountResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.ListMessageCount", in)
	out := new(ListMessageCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SendSystemMessage(ctx context.Context, in *SendSystemMessageRequest, opts ...client.CallOption) (*SendSystemMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.SendSystemMessage", in)
	out := new(SendSystemMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...client.CallOption) (*SendPrivateMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.SendPrivateMessage", in)
	out := new(SendPrivateMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SendRemindMessage(ctx context.Context, in *SendRemindMessageRequest, opts ...client.CallOption) (*SendRemindMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.SendRemindMessage", in)
	out := new(SendRemindMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) GetChatList(ctx context.Context, in *GetChatListRequest, opts ...client.CallOption) (*GetChatListResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.GetChatList", in)
	out := new(GetChatListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) LoadMessage(ctx context.Context, in *LoadMessageRequest, opts ...client.CallOption) (*LoadMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.LoadMessage", in)
	out := new(LoadMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceHandler interface {
	ListMessageCount(context.Context, *ListMessageCountRequest, *ListMessageCountResponse) error
	SendSystemMessage(context.Context, *SendSystemMessageRequest, *SendSystemMessageResponse) error
	SendPrivateMessage(context.Context, *SendPrivateMessageRequest, *SendPrivateMessageResponse) error
	SendRemindMessage(context.Context, *SendRemindMessageRequest, *SendRemindMessageResponse) error
	GetChatList(context.Context, *GetChatListRequest, *GetChatListResponse) error
	LoadMessage(context.Context, *LoadMessageRequest, *LoadMessageResponse) error
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
}

func RegisterMessageServiceHandler(s server.Server, hdlr MessageServiceHandler, opts ...server.HandlerOption) error {
	type messageService interface {
		ListMessageCount(ctx context.Context, in *ListMessageCountRequest, out *ListMessageCountResponse) error
		SendSystemMessage(ctx context.Context, in *SendSystemMessageRequest, out *SendSystemMessageResponse) error
		SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, out *SendPrivateMessageResponse) error
		SendRemindMessage(ctx context.Context, in *SendRemindMessageRequest, out *SendRemindMessageResponse) error
		GetChatList(ctx context.Context, in *GetChatListRequest, out *GetChatListResponse) error
		LoadMessage(ctx context.Context, in *LoadMessageRequest, out *LoadMessageResponse) error
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
	}
	type MessageService struct {
		messageService
	}
	h := &messageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageService{h}, opts...))
}

type messageServiceHandler struct {
	MessageServiceHandler
}

func (h *messageServiceHandler) ListMessageCount(ctx context.Context, in *ListMessageCountRequest, out *ListMessageCountResponse) error {
	return h.MessageServiceHandler.ListMessageCount(ctx, in, out)
}

func (h *messageServiceHandler) SendSystemMessage(ctx context.Context, in *SendSystemMessageRequest, out *SendSystemMessageResponse) error {
	return h.MessageServiceHandler.SendSystemMessage(ctx, in, out)
}

func (h *messageServiceHandler) SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, out *SendPrivateMessageResponse) error {
	return h.MessageServiceHandler.SendPrivateMessage(ctx, in, out)
}

func (h *messageServiceHandler) SendRemindMessage(ctx context.Context, in *SendRemindMessageRequest, out *SendRemindMessageResponse) error {
	return h.MessageServiceHandler.SendRemindMessage(ctx, in, out)
}

func (h *messageServiceHandler) GetChatList(ctx context.Context, in *GetChatListRequest, out *GetChatListResponse) error {
	return h.MessageServiceHandler.GetChatList(ctx, in, out)
}

func (h *messageServiceHandler) LoadMessage(ctx context.Context, in *LoadMessageRequest, out *LoadMessageResponse) error {
	return h.MessageServiceHandler.LoadMessage(ctx, in, out)
}

func (h *messageServiceHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.MessageServiceHandler.SendMessage(ctx, in, out)
}
