// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: feed.proto

package feedPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
	_ "star/proto/community/communityPb"
	_ "star/proto/user/userPb"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostService service

func NewPostServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostService service

type PostService interface {
	QueryPostExist(ctx context.Context, in *QueryPostExistRequest, opts ...client.CallOption) (*QueryPostExistResponse, error)
	GetCommunityPostByPopularity(ctx context.Context, in *GetCommunityPostByPopularityRequest, opts ...client.CallOption) (*GetCommunityPostByPopularityResponse, error)
	GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, opts ...client.CallOption) (*GetCommunityPostByTimeResponse, error)
	GetPostByTime(ctx context.Context, in *GetPostByTimeRequest, opts ...client.CallOption) (*GetPostByTimeResponse, error)
	QueryPosts(ctx context.Context, in *QueryPostsRequest, opts ...client.CallOption) (*QueryPostsResponse, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) QueryPostExist(ctx context.Context, in *QueryPostExistRequest, opts ...client.CallOption) (*QueryPostExistResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.QueryPostExist", in)
	out := new(QueryPostExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetCommunityPostByPopularity(ctx context.Context, in *GetCommunityPostByPopularityRequest, opts ...client.CallOption) (*GetCommunityPostByPopularityResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetCommunityPostByPopularity", in)
	out := new(GetCommunityPostByPopularityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, opts ...client.CallOption) (*GetCommunityPostByTimeResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetCommunityPostByTime", in)
	out := new(GetCommunityPostByTimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetPostByTime(ctx context.Context, in *GetPostByTimeRequest, opts ...client.CallOption) (*GetPostByTimeResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetPostByTime", in)
	out := new(GetPostByTimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) QueryPosts(ctx context.Context, in *QueryPostsRequest, opts ...client.CallOption) (*QueryPostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.QueryPosts", in)
	out := new(QueryPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	QueryPostExist(context.Context, *QueryPostExistRequest, *QueryPostExistResponse) error
	GetCommunityPostByPopularity(context.Context, *GetCommunityPostByPopularityRequest, *GetCommunityPostByPopularityResponse) error
	GetCommunityPostByTime(context.Context, *GetCommunityPostByTimeRequest, *GetCommunityPostByTimeResponse) error
	GetPostByTime(context.Context, *GetPostByTimeRequest, *GetPostByTimeResponse) error
	QueryPosts(context.Context, *QueryPostsRequest, *QueryPostsResponse) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		QueryPostExist(ctx context.Context, in *QueryPostExistRequest, out *QueryPostExistResponse) error
		GetCommunityPostByPopularity(ctx context.Context, in *GetCommunityPostByPopularityRequest, out *GetCommunityPostByPopularityResponse) error
		GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, out *GetCommunityPostByTimeResponse) error
		GetPostByTime(ctx context.Context, in *GetPostByTimeRequest, out *GetPostByTimeResponse) error
		QueryPosts(ctx context.Context, in *QueryPostsRequest, out *QueryPostsResponse) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) QueryPostExist(ctx context.Context, in *QueryPostExistRequest, out *QueryPostExistResponse) error {
	return h.PostServiceHandler.QueryPostExist(ctx, in, out)
}

func (h *postServiceHandler) GetCommunityPostByPopularity(ctx context.Context, in *GetCommunityPostByPopularityRequest, out *GetCommunityPostByPopularityResponse) error {
	return h.PostServiceHandler.GetCommunityPostByPopularity(ctx, in, out)
}

func (h *postServiceHandler) GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, out *GetCommunityPostByTimeResponse) error {
	return h.PostServiceHandler.GetCommunityPostByTime(ctx, in, out)
}

func (h *postServiceHandler) GetPostByTime(ctx context.Context, in *GetPostByTimeRequest, out *GetPostByTimeResponse) error {
	return h.PostServiceHandler.GetPostByTime(ctx, in, out)
}

func (h *postServiceHandler) QueryPosts(ctx context.Context, in *QueryPostsRequest, out *QueryPostsResponse) error {
	return h.PostServiceHandler.QueryPosts(ctx, in, out)
}
