// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: feed.proto

package feedPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
	_ "star/proto/community/communityPb"
	_ "star/proto/user/userPb"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FeedService service

func NewFeedServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FeedService service

type FeedService interface {
	QueryPostExist(ctx context.Context, in *QueryPostExistRequest, opts ...client.CallOption) (*QueryPostExistResponse, error)
	GetCommunityPostByNewReply(ctx context.Context, in *GetCommunityPostByNewReplyRequest, opts ...client.CallOption) (*GetCommunityPostByNewReplyResponse, error)
	GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, opts ...client.CallOption) (*GetCommunityPostByTimeResponse, error)
	GetPostByRelation(ctx context.Context, in *GetPostByRelationRequest, opts ...client.CallOption) (*GetPostByRelationResponse, error)
	QueryPosts(ctx context.Context, in *QueryPostsRequest, opts ...client.CallOption) (*QueryPostsResponse, error)
}

type feedService struct {
	c    client.Client
	name string
}

func NewFeedService(name string, c client.Client) FeedService {
	return &feedService{
		c:    c,
		name: name,
	}
}

func (c *feedService) QueryPostExist(ctx context.Context, in *QueryPostExistRequest, opts ...client.CallOption) (*QueryPostExistResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.QueryPostExist", in)
	out := new(QueryPostExistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetCommunityPostByNewReply(ctx context.Context, in *GetCommunityPostByNewReplyRequest, opts ...client.CallOption) (*GetCommunityPostByNewReplyResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.GetCommunityPostByNewReply", in)
	out := new(GetCommunityPostByNewReplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, opts ...client.CallOption) (*GetCommunityPostByTimeResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.GetCommunityPostByTime", in)
	out := new(GetCommunityPostByTimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetPostByRelation(ctx context.Context, in *GetPostByRelationRequest, opts ...client.CallOption) (*GetPostByRelationResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.GetPostByRelation", in)
	out := new(GetPostByRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) QueryPosts(ctx context.Context, in *QueryPostsRequest, opts ...client.CallOption) (*QueryPostsResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.QueryPosts", in)
	out := new(QueryPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedService service

type FeedServiceHandler interface {
	QueryPostExist(context.Context, *QueryPostExistRequest, *QueryPostExistResponse) error
	GetCommunityPostByNewReply(context.Context, *GetCommunityPostByNewReplyRequest, *GetCommunityPostByNewReplyResponse) error
	GetCommunityPostByTime(context.Context, *GetCommunityPostByTimeRequest, *GetCommunityPostByTimeResponse) error
	GetPostByRelation(context.Context, *GetPostByRelationRequest, *GetPostByRelationResponse) error
	QueryPosts(context.Context, *QueryPostsRequest, *QueryPostsResponse) error
}

func RegisterFeedServiceHandler(s server.Server, hdlr FeedServiceHandler, opts ...server.HandlerOption) error {
	type feedService interface {
		QueryPostExist(ctx context.Context, in *QueryPostExistRequest, out *QueryPostExistResponse) error
		GetCommunityPostByNewReply(ctx context.Context, in *GetCommunityPostByNewReplyRequest, out *GetCommunityPostByNewReplyResponse) error
		GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, out *GetCommunityPostByTimeResponse) error
		GetPostByRelation(ctx context.Context, in *GetPostByRelationRequest, out *GetPostByRelationResponse) error
		QueryPosts(ctx context.Context, in *QueryPostsRequest, out *QueryPostsResponse) error
	}
	type FeedService struct {
		feedService
	}
	h := &feedServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedService{h}, opts...))
}

type feedServiceHandler struct {
	FeedServiceHandler
}

func (h *feedServiceHandler) QueryPostExist(ctx context.Context, in *QueryPostExistRequest, out *QueryPostExistResponse) error {
	return h.FeedServiceHandler.QueryPostExist(ctx, in, out)
}

func (h *feedServiceHandler) GetCommunityPostByNewReply(ctx context.Context, in *GetCommunityPostByNewReplyRequest, out *GetCommunityPostByNewReplyResponse) error {
	return h.FeedServiceHandler.GetCommunityPostByNewReply(ctx, in, out)
}

func (h *feedServiceHandler) GetCommunityPostByTime(ctx context.Context, in *GetCommunityPostByTimeRequest, out *GetCommunityPostByTimeResponse) error {
	return h.FeedServiceHandler.GetCommunityPostByTime(ctx, in, out)
}

func (h *feedServiceHandler) GetPostByRelation(ctx context.Context, in *GetPostByRelationRequest, out *GetPostByRelationResponse) error {
	return h.FeedServiceHandler.GetPostByRelation(ctx, in, out)
}

func (h *feedServiceHandler) QueryPosts(ctx context.Context, in *QueryPostsRequest, out *QueryPostsResponse) error {
	return h.FeedServiceHandler.QueryPosts(ctx, in, out)
}
