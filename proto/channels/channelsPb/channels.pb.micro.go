// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: channels.proto

package channelsPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Channels service

func NewChannelsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Channels service

type ChannelsService interface {
	SendMsgToServer(ctx context.Context, in *SendToServerRequest, opts ...client.CallOption) (*SendToServerResponse, error)
	SendMsgToClient(ctx context.Context, in *SendToClientRequest, opts ...client.CallOption) (*SendToClientResponse, error)
}

type channelsService struct {
	c    client.Client
	name string
}

func NewChannelsService(name string, c client.Client) ChannelsService {
	return &channelsService{
		c:    c,
		name: name,
	}
}

func (c *channelsService) SendMsgToServer(ctx context.Context, in *SendToServerRequest, opts ...client.CallOption) (*SendToServerResponse, error) {
	req := c.c.NewRequest(c.name, "Channels.SendMsgToServer", in)
	out := new(SendToServerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelsService) SendMsgToClient(ctx context.Context, in *SendToClientRequest, opts ...client.CallOption) (*SendToClientResponse, error) {
	req := c.c.NewRequest(c.name, "Channels.SendMsgToClient", in)
	out := new(SendToClientResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channels service

type ChannelsHandler interface {
	SendMsgToServer(context.Context, *SendToServerRequest, *SendToServerResponse) error
	SendMsgToClient(context.Context, *SendToClientRequest, *SendToClientResponse) error
}

func RegisterChannelsHandler(s server.Server, hdlr ChannelsHandler, opts ...server.HandlerOption) error {
	type channels interface {
		SendMsgToServer(ctx context.Context, in *SendToServerRequest, out *SendToServerResponse) error
		SendMsgToClient(ctx context.Context, in *SendToClientRequest, out *SendToClientResponse) error
	}
	type Channels struct {
		channels
	}
	h := &channelsHandler{hdlr}
	return s.Handle(s.NewHandler(&Channels{h}, opts...))
}

type channelsHandler struct {
	ChannelsHandler
}

func (h *channelsHandler) SendMsgToServer(ctx context.Context, in *SendToServerRequest, out *SendToServerResponse) error {
	return h.ChannelsHandler.SendMsgToServer(ctx, in, out)
}

func (h *channelsHandler) SendMsgToClient(ctx context.Context, in *SendToClientRequest, out *SendToClientResponse) error {
	return h.ChannelsHandler.SendMsgToClient(ctx, in, out)
}
