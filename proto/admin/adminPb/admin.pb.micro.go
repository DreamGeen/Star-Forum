// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: admin.proto

package adminPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AdminService service

func NewAdminServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AdminService service

type AdminService interface {
	LoadCategoryList(ctx context.Context, in *LoadCategoryListRequest, opts ...client.CallOption) (*LoadCategoryListResponse, error)
	DelCategory(ctx context.Context, in *DelCategoryRequest, opts ...client.CallOption) (*DelCategoryResponse, error)
	SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...client.CallOption) (*SaveCategoryResponse, error)
	ChangeSort(ctx context.Context, in *ChangeSortRequest, opts ...client.CallOption) (*ChangeSortResponse, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) LoadCategoryList(ctx context.Context, in *LoadCategoryListRequest, opts ...client.CallOption) (*LoadCategoryListResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.LoadCategoryList", in)
	out := new(LoadCategoryListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) DelCategory(ctx context.Context, in *DelCategoryRequest, opts ...client.CallOption) (*DelCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.DelCategory", in)
	out := new(DelCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...client.CallOption) (*SaveCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.SaveCategory", in)
	out := new(SaveCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) ChangeSort(ctx context.Context, in *ChangeSortRequest, opts ...client.CallOption) (*ChangeSortResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ChangeSort", in)
	out := new(ChangeSortResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	LoadCategoryList(context.Context, *LoadCategoryListRequest, *LoadCategoryListResponse) error
	DelCategory(context.Context, *DelCategoryRequest, *DelCategoryResponse) error
	SaveCategory(context.Context, *SaveCategoryRequest, *SaveCategoryResponse) error
	ChangeSort(context.Context, *ChangeSortRequest, *ChangeSortResponse) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		LoadCategoryList(ctx context.Context, in *LoadCategoryListRequest, out *LoadCategoryListResponse) error
		DelCategory(ctx context.Context, in *DelCategoryRequest, out *DelCategoryResponse) error
		SaveCategory(ctx context.Context, in *SaveCategoryRequest, out *SaveCategoryResponse) error
		ChangeSort(ctx context.Context, in *ChangeSortRequest, out *ChangeSortResponse) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) LoadCategoryList(ctx context.Context, in *LoadCategoryListRequest, out *LoadCategoryListResponse) error {
	return h.AdminServiceHandler.LoadCategoryList(ctx, in, out)
}

func (h *adminServiceHandler) DelCategory(ctx context.Context, in *DelCategoryRequest, out *DelCategoryResponse) error {
	return h.AdminServiceHandler.DelCategory(ctx, in, out)
}

func (h *adminServiceHandler) SaveCategory(ctx context.Context, in *SaveCategoryRequest, out *SaveCategoryResponse) error {
	return h.AdminServiceHandler.SaveCategory(ctx, in, out)
}

func (h *adminServiceHandler) ChangeSort(ctx context.Context, in *ChangeSortRequest, out *ChangeSortResponse) error {
	return h.AdminServiceHandler.ChangeSort(ctx, in, out)
}
