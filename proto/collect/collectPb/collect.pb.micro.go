// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: collect.proto

package collectPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
	_ "star/proto/feed/feedPb"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CollectService service

func NewCollectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CollectService service

type CollectService interface {
	IsCollect(ctx context.Context, in *IsCollectRequest, opts ...client.CallOption) (*IsCollectResponse, error)
	CollectAction(ctx context.Context, in *CollectActionRequest, opts ...client.CallOption) (*CollectActionResponse, error)
	CollectList(ctx context.Context, in *CollectListRequest, opts ...client.CallOption) (*CollectListResponse, error)
	GetCollectCount(ctx context.Context, in *GetCollectCountRequest, opts ...client.CallOption) (*GetCollectCountResponse, error)
	GetUserCollectCount(ctx context.Context, in *GetUserCollectCountRequest, opts ...client.CallOption) (*GetUserCollectCountResponse, error)
}

type collectService struct {
	c    client.Client
	name string
}

func NewCollectService(name string, c client.Client) CollectService {
	return &collectService{
		c:    c,
		name: name,
	}
}

func (c *collectService) IsCollect(ctx context.Context, in *IsCollectRequest, opts ...client.CallOption) (*IsCollectResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.IsCollect", in)
	out := new(IsCollectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) CollectAction(ctx context.Context, in *CollectActionRequest, opts ...client.CallOption) (*CollectActionResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.CollectAction", in)
	out := new(CollectActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) CollectList(ctx context.Context, in *CollectListRequest, opts ...client.CallOption) (*CollectListResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.CollectList", in)
	out := new(CollectListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) GetCollectCount(ctx context.Context, in *GetCollectCountRequest, opts ...client.CallOption) (*GetCollectCountResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.GetCollectCount", in)
	out := new(GetCollectCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) GetUserCollectCount(ctx context.Context, in *GetUserCollectCountRequest, opts ...client.CallOption) (*GetUserCollectCountResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.GetUserCollectCount", in)
	out := new(GetUserCollectCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectService service

type CollectServiceHandler interface {
	IsCollect(context.Context, *IsCollectRequest, *IsCollectResponse) error
	CollectAction(context.Context, *CollectActionRequest, *CollectActionResponse) error
	CollectList(context.Context, *CollectListRequest, *CollectListResponse) error
	GetCollectCount(context.Context, *GetCollectCountRequest, *GetCollectCountResponse) error
	GetUserCollectCount(context.Context, *GetUserCollectCountRequest, *GetUserCollectCountResponse) error
}

func RegisterCollectServiceHandler(s server.Server, hdlr CollectServiceHandler, opts ...server.HandlerOption) error {
	type collectService interface {
		IsCollect(ctx context.Context, in *IsCollectRequest, out *IsCollectResponse) error
		CollectAction(ctx context.Context, in *CollectActionRequest, out *CollectActionResponse) error
		CollectList(ctx context.Context, in *CollectListRequest, out *CollectListResponse) error
		GetCollectCount(ctx context.Context, in *GetCollectCountRequest, out *GetCollectCountResponse) error
		GetUserCollectCount(ctx context.Context, in *GetUserCollectCountRequest, out *GetUserCollectCountResponse) error
	}
	type CollectService struct {
		collectService
	}
	h := &collectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CollectService{h}, opts...))
}

type collectServiceHandler struct {
	CollectServiceHandler
}

func (h *collectServiceHandler) IsCollect(ctx context.Context, in *IsCollectRequest, out *IsCollectResponse) error {
	return h.CollectServiceHandler.IsCollect(ctx, in, out)
}

func (h *collectServiceHandler) CollectAction(ctx context.Context, in *CollectActionRequest, out *CollectActionResponse) error {
	return h.CollectServiceHandler.CollectAction(ctx, in, out)
}

func (h *collectServiceHandler) CollectList(ctx context.Context, in *CollectListRequest, out *CollectListResponse) error {
	return h.CollectServiceHandler.CollectList(ctx, in, out)
}

func (h *collectServiceHandler) GetCollectCount(ctx context.Context, in *GetCollectCountRequest, out *GetCollectCountResponse) error {
	return h.CollectServiceHandler.GetCollectCount(ctx, in, out)
}

func (h *collectServiceHandler) GetUserCollectCount(ctx context.Context, in *GetUserCollectCountRequest, out *GetUserCollectCountResponse) error {
	return h.CollectServiceHandler.GetUserCollectCount(ctx, in, out)
}
