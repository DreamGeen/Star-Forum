// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: community.proto

package communityPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Community service

func NewCommunityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Community service

type CommunityService interface {
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...client.CallOption) (*EmptyCommunityResponse, error)
	GetCommunityList(ctx context.Context, in *EmptyCommunityRequest, opts ...client.CallOption) (*GetCommunityListResponse, error)
	ShowCommunity(ctx context.Context, in *ShowCommunityRequest, opts ...client.CallOption) (*ShowCommunityResponse, error)
}

type communityService struct {
	c    client.Client
	name string
}

func NewCommunityService(name string, c client.Client) CommunityService {
	return &communityService{
		c:    c,
		name: name,
	}
}

func (c *communityService) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...client.CallOption) (*EmptyCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.CreateCommunity", in)
	out := new(EmptyCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) GetCommunityList(ctx context.Context, in *EmptyCommunityRequest, opts ...client.CallOption) (*GetCommunityListResponse, error) {
	req := c.c.NewRequest(c.name, "Community.GetCommunityList", in)
	out := new(GetCommunityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) ShowCommunity(ctx context.Context, in *ShowCommunityRequest, opts ...client.CallOption) (*ShowCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.ShowCommunity", in)
	out := new(ShowCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Community service

type CommunityHandler interface {
	CreateCommunity(context.Context, *CreateCommunityRequest, *EmptyCommunityResponse) error
	GetCommunityList(context.Context, *EmptyCommunityRequest, *GetCommunityListResponse) error
	ShowCommunity(context.Context, *ShowCommunityRequest, *ShowCommunityResponse) error
}

func RegisterCommunityHandler(s server.Server, hdlr CommunityHandler, opts ...server.HandlerOption) error {
	type community interface {
		CreateCommunity(ctx context.Context, in *CreateCommunityRequest, out *EmptyCommunityResponse) error
		GetCommunityList(ctx context.Context, in *EmptyCommunityRequest, out *GetCommunityListResponse) error
		ShowCommunity(ctx context.Context, in *ShowCommunityRequest, out *ShowCommunityResponse) error
	}
	type Community struct {
		community
	}
	h := &communityHandler{hdlr}
	return s.Handle(s.NewHandler(&Community{h}, opts...))
}

type communityHandler struct {
	CommunityHandler
}

func (h *communityHandler) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, out *EmptyCommunityResponse) error {
	return h.CommunityHandler.CreateCommunity(ctx, in, out)
}

func (h *communityHandler) GetCommunityList(ctx context.Context, in *EmptyCommunityRequest, out *GetCommunityListResponse) error {
	return h.CommunityHandler.GetCommunityList(ctx, in, out)
}

func (h *communityHandler) ShowCommunity(ctx context.Context, in *ShowCommunityRequest, out *ShowCommunityResponse) error {
	return h.CommunityHandler.ShowCommunity(ctx, in, out)
}
