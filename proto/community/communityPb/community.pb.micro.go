// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: community.proto

package communityPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Community service

func NewCommunityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Community service

type CommunityService interface {
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...client.CallOption) (*EmptyCommunityResponse, error)
	GetCommunityInfo(ctx context.Context, in *GetCommunityInfoRequest, opts ...client.CallOption) (*GetCommunityInfoResponse, error)
	FollowCommunity(ctx context.Context, in *FollowCommunityRequest, opts ...client.CallOption) (*FollowCommunityResponse, error)
	UnFollowCommunity(ctx context.Context, in *UnFollowCommunityRequest, opts ...client.CallOption) (*UnFollowCommunityResponse, error)
	IsFollowCommunity(ctx context.Context, in *IsFollowCommunityRequest, opts ...client.CallOption) (*IsFollowCommunityResponse, error)
	CountCommunityFollow(ctx context.Context, in *CountCommunityFollowRequest, opts ...client.CallOption) (*CountCommunityFollowResponse, error)
	GetFollowCommunityList(ctx context.Context, in *GetFollowCommunityListRequest, opts ...client.CallOption) (*GetFollowCommunityListResponse, error)
}

type communityService struct {
	c    client.Client
	name string
}

func NewCommunityService(name string, c client.Client) CommunityService {
	return &communityService{
		c:    c,
		name: name,
	}
}

func (c *communityService) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...client.CallOption) (*EmptyCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.CreateCommunity", in)
	out := new(EmptyCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) GetCommunityInfo(ctx context.Context, in *GetCommunityInfoRequest, opts ...client.CallOption) (*GetCommunityInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Community.GetCommunityInfo", in)
	out := new(GetCommunityInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) FollowCommunity(ctx context.Context, in *FollowCommunityRequest, opts ...client.CallOption) (*FollowCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.FollowCommunity", in)
	out := new(FollowCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) UnFollowCommunity(ctx context.Context, in *UnFollowCommunityRequest, opts ...client.CallOption) (*UnFollowCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.UnFollowCommunity", in)
	out := new(UnFollowCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) IsFollowCommunity(ctx context.Context, in *IsFollowCommunityRequest, opts ...client.CallOption) (*IsFollowCommunityResponse, error) {
	req := c.c.NewRequest(c.name, "Community.IsFollowCommunity", in)
	out := new(IsFollowCommunityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) CountCommunityFollow(ctx context.Context, in *CountCommunityFollowRequest, opts ...client.CallOption) (*CountCommunityFollowResponse, error) {
	req := c.c.NewRequest(c.name, "Community.CountCommunityFollow", in)
	out := new(CountCommunityFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityService) GetFollowCommunityList(ctx context.Context, in *GetFollowCommunityListRequest, opts ...client.CallOption) (*GetFollowCommunityListResponse, error) {
	req := c.c.NewRequest(c.name, "Community.GetFollowCommunityList", in)
	out := new(GetFollowCommunityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Community service

type CommunityHandler interface {
	CreateCommunity(context.Context, *CreateCommunityRequest, *EmptyCommunityResponse) error
	GetCommunityInfo(context.Context, *GetCommunityInfoRequest, *GetCommunityInfoResponse) error
	FollowCommunity(context.Context, *FollowCommunityRequest, *FollowCommunityResponse) error
	UnFollowCommunity(context.Context, *UnFollowCommunityRequest, *UnFollowCommunityResponse) error
	IsFollowCommunity(context.Context, *IsFollowCommunityRequest, *IsFollowCommunityResponse) error
	CountCommunityFollow(context.Context, *CountCommunityFollowRequest, *CountCommunityFollowResponse) error
	GetFollowCommunityList(context.Context, *GetFollowCommunityListRequest, *GetFollowCommunityListResponse) error
}

func RegisterCommunityHandler(s server.Server, hdlr CommunityHandler, opts ...server.HandlerOption) error {
	type community interface {
		CreateCommunity(ctx context.Context, in *CreateCommunityRequest, out *EmptyCommunityResponse) error
		GetCommunityInfo(ctx context.Context, in *GetCommunityInfoRequest, out *GetCommunityInfoResponse) error
		FollowCommunity(ctx context.Context, in *FollowCommunityRequest, out *FollowCommunityResponse) error
		UnFollowCommunity(ctx context.Context, in *UnFollowCommunityRequest, out *UnFollowCommunityResponse) error
		IsFollowCommunity(ctx context.Context, in *IsFollowCommunityRequest, out *IsFollowCommunityResponse) error
		CountCommunityFollow(ctx context.Context, in *CountCommunityFollowRequest, out *CountCommunityFollowResponse) error
		GetFollowCommunityList(ctx context.Context, in *GetFollowCommunityListRequest, out *GetFollowCommunityListResponse) error
	}
	type Community struct {
		community
	}
	h := &communityHandler{hdlr}
	return s.Handle(s.NewHandler(&Community{h}, opts...))
}

type communityHandler struct {
	CommunityHandler
}

func (h *communityHandler) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, out *EmptyCommunityResponse) error {
	return h.CommunityHandler.CreateCommunity(ctx, in, out)
}

func (h *communityHandler) GetCommunityInfo(ctx context.Context, in *GetCommunityInfoRequest, out *GetCommunityInfoResponse) error {
	return h.CommunityHandler.GetCommunityInfo(ctx, in, out)
}

func (h *communityHandler) FollowCommunity(ctx context.Context, in *FollowCommunityRequest, out *FollowCommunityResponse) error {
	return h.CommunityHandler.FollowCommunity(ctx, in, out)
}

func (h *communityHandler) UnFollowCommunity(ctx context.Context, in *UnFollowCommunityRequest, out *UnFollowCommunityResponse) error {
	return h.CommunityHandler.UnFollowCommunity(ctx, in, out)
}

func (h *communityHandler) IsFollowCommunity(ctx context.Context, in *IsFollowCommunityRequest, out *IsFollowCommunityResponse) error {
	return h.CommunityHandler.IsFollowCommunity(ctx, in, out)
}

func (h *communityHandler) CountCommunityFollow(ctx context.Context, in *CountCommunityFollowRequest, out *CountCommunityFollowResponse) error {
	return h.CommunityHandler.CountCommunityFollow(ctx, in, out)
}

func (h *communityHandler) GetFollowCommunityList(ctx context.Context, in *GetFollowCommunityListRequest, out *GetFollowCommunityListResponse) error {
	return h.CommunityHandler.GetFollowCommunityList(ctx, in, out)
}
