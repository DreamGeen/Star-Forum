// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sendSms.proto

package sendSmsPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SendMsg service

func NewSendMsgEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SendMsg service

type SendMsgService interface {
	HandleSendSms(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*EmptySendResponse, error)
}

type sendMsgService struct {
	c    client.Client
	name string
}

func NewSendMsgService(name string, c client.Client) SendMsgService {
	return &sendMsgService{
		c:    c,
		name: name,
	}
}

func (c *sendMsgService) HandleSendSms(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*EmptySendResponse, error) {
	req := c.c.NewRequest(c.name, "SendMsg.HandleSendSms", in)
	out := new(EmptySendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SendMsg service

type SendMsgHandler interface {
	HandleSendSms(context.Context, *SendRequest, *EmptySendResponse) error
}

func RegisterSendMsgHandler(s server.Server, hdlr SendMsgHandler, opts ...server.HandlerOption) error {
	type sendMsg interface {
		HandleSendSms(ctx context.Context, in *SendRequest, out *EmptySendResponse) error
	}
	type SendMsg struct {
		sendMsg
	}
	h := &sendMsgHandler{hdlr}
	return s.Handle(s.NewHandler(&SendMsg{h}, opts...))
}

type sendMsgHandler struct {
	SendMsgHandler
}

func (h *sendMsgHandler) HandleSendSms(ctx context.Context, in *SendRequest, out *EmptySendResponse) error {
	return h.SendMsgHandler.HandleSendSms(ctx, in, out)
}
